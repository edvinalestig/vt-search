/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`stop_areas_stop_area_gid_arrivals_details_reference_details_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetError {
    Status400(crate::models::ApiError),
    Status404(crate::models::MicrosoftPeriodAspNetCorePeriodMvcPeriodProblemDetails),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stop_areas_stop_area_gid_arrivals_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopAreasStopAreaGidArrivalsGetError {
    Status400(crate::models::ApiError),
    Status404(crate::models::MicrosoftPeriodAspNetCorePeriodMvcPeriodProblemDetails),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stop_areas_stop_area_gid_departures_details_reference_details_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetError {
    Status400(crate::models::ApiError),
    Status404(crate::models::MicrosoftPeriodAspNetCorePeriodMvcPeriodProblemDetails),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stop_areas_stop_area_gid_departures_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopAreasStopAreaGidDeparturesGetError {
    Status400(crate::models::ApiError),
    Status404(crate::models::MicrosoftPeriodAspNetCorePeriodMvcPeriodProblemDetails),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}


/// Sample request:        GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes=servicejourneycalls
pub async fn stop_areas_stop_area_gid_arrivals_details_reference_details_get(configuration: &configuration::Configuration, details_reference: &str, stop_area_gid: &str, includes: Option<Vec<crate::models::ArrivalDetailsIncludeType>>) -> Result<crate::models::DeparturesAndArrivalsPeriodArrivalDetailsApiModel, Error<StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/stop-areas/{stopAreaGid}/arrivals/{detailsReference}/details", local_var_configuration.base_path, detailsReference=crate::apis::urlencode(details_reference), stopAreaGid=crate::apis::urlencode(stop_area_gid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = includes {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("includes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("includes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sample request:        GET /stop-areas/9021014003980000/arrivals
pub async fn stop_areas_stop_area_gid_arrivals_get(configuration: &configuration::Configuration, stop_area_gid: &str, start_date_time: Option<String>, platforms: Option<&str>, time_span_in_minutes: Option<i32>, max_arrivals_per_line_and_direction: Option<i32>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DeparturesAndArrivalsPeriodGetArrivalsResponse, Error<StopAreasStopAreaGidArrivalsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/stop-areas/{stopAreaGid}/arrivals", local_var_configuration.base_path, stopAreaGid=crate::apis::urlencode(stop_area_gid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = start_date_time {
        local_var_req_builder = local_var_req_builder.query(&[("startDateTime", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platforms {
        local_var_req_builder = local_var_req_builder.query(&[("platforms", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = time_span_in_minutes {
        local_var_req_builder = local_var_req_builder.query(&[("timeSpanInMinutes", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_arrivals_per_line_and_direction {
        local_var_req_builder = local_var_req_builder.query(&[("maxArrivalsPerLineAndDirection", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StopAreasStopAreaGidArrivalsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sample request:        GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes=servicejourneycalls
pub async fn stop_areas_stop_area_gid_departures_details_reference_details_get(configuration: &configuration::Configuration, details_reference: &str, stop_area_gid: &str, includes: Option<Vec<crate::models::DepartureDetailsIncludeType>>) -> Result<crate::models::DeparturesAndArrivalsPeriodDepartureDetailsApiModel, Error<StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/stop-areas/{stopAreaGid}/departures/{detailsReference}/details", local_var_configuration.base_path, detailsReference=crate::apis::urlencode(details_reference), stopAreaGid=crate::apis::urlencode(stop_area_gid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = includes {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("includes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("includes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sample request:        GET /stop-areas/9021014003980000/departures
pub async fn stop_areas_stop_area_gid_departures_get(configuration: &configuration::Configuration, stop_area_gid: &str, start_date_time: Option<String>, platforms: Option<&str>, time_span_in_minutes: Option<i32>, max_departures_per_line_and_direction: Option<i32>, limit: Option<i32>, offset: Option<i32>, include_occupancy: Option<bool>) -> Result<crate::models::DeparturesAndArrivalsPeriodGetDeparturesResponse, Error<StopAreasStopAreaGidDeparturesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/stop-areas/{stopAreaGid}/departures", local_var_configuration.base_path, stopAreaGid=crate::apis::urlencode(stop_area_gid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = start_date_time {
        local_var_req_builder = local_var_req_builder.query(&[("startDateTime", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platforms {
        local_var_req_builder = local_var_req_builder.query(&[("platforms", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = time_span_in_minutes {
        local_var_req_builder = local_var_req_builder.query(&[("timeSpanInMinutes", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_departures_per_line_and_direction {
        local_var_req_builder = local_var_req_builder.query(&[("maxDeparturesPerLineAndDirection", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_occupancy {
        local_var_req_builder = local_var_req_builder.query(&[("includeOccupancy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StopAreasStopAreaGidDeparturesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

