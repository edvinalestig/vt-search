/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`journeys_details_reference_details_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JourneysDetailsReferenceDetailsGetError {
    Status400(crate::models::ApiError),
    Status404(crate::models::MicrosoftPeriodAspNetCorePeriodMvcPeriodProblemDetails),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`journeys_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JourneysGetError {
    Status400(crate::models::ApiError),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`journeys_reconstruct_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JourneysReconstructGetError {
    Status400(crate::models::ApiError),
    Status500(),
    Status503(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`journeys_valid_time_interval_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JourneysValidTimeIntervalGetError {
    Status404(crate::models::MicrosoftPeriodAspNetCorePeriodMvcPeriodProblemDetails),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}


/// Sample request:        GET /journeys/{detailsReference}/details?includes=ticketsuggestions
pub async fn journeys_details_reference_details_get(configuration: &configuration::Configuration, details_reference: &str, includes: Option<Vec<crate::models::JourneyDetailsIncludeType>>, channel_ids: Option<Vec<i32>>, product_types: Option<Vec<i32>>, traveller_categories: Option<Vec<crate::models::TravellerCategory>>) -> Result<crate::models::JourneyDetailsPeriodJourneyDetailsApiModel, Error<JourneysDetailsReferenceDetailsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/journeys/{detailsReference}/details", local_var_configuration.base_path, detailsReference=crate::apis::urlencode(details_reference));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = includes {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("includes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("includes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = channel_ids {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("channelIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("channelIds", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = product_types {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("productTypes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("productTypes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = traveller_categories {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("travellerCategories".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("travellerCategories", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<JourneysDetailsReferenceDetailsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.    Sample request:        GET /journeys?originGid=9021014001760000&destinationGid=9021014003980000    or        GET /journeys?originName=Sadelsten,+V%C3%A5rg%C3%A5rda&originLongitude=12.63308&originLatitude=58.028237&destinationLongitude=11.930897&destinationLatitude=57.586085&destinationName=%C3%85sdammsstigen,+427+36+Billdal
pub async fn journeys_get(configuration: &configuration::Configuration, origin_gid: Option<&str>, origin_name: Option<&str>, origin_latitude: Option<f64>, origin_longitude: Option<f64>, destination_gid: Option<&str>, destination_name: Option<&str>, destination_latitude: Option<f64>, destination_longitude: Option<f64>, date_time: Option<String>, date_time_relates_to: Option<crate::models::DateTimeRelatesToType>, pagination_reference: Option<&str>, limit: Option<i32>, transport_modes: Option<Vec<crate::models::JourneyTransportMode>>, transport_sub_modes: Option<Vec<crate::models::JourneyTransportSubMode>>, only_direct_connections: Option<bool>, include_nearby_stop_areas: Option<bool>, via_gid: Option<i64>, origin_walk: Option<&str>, dest_walk: Option<&str>, origin_bike: Option<&str>, dest_bike: Option<&str>, total_bike: Option<&str>, origin_car: Option<&str>, dest_car: Option<&str>, origin_park: Option<&str>, dest_park: Option<&str>, interchange_duration_in_minutes: Option<i32>, include_occupancy: Option<bool>) -> Result<crate::models::JourneysPeriodGetJourneysResponse, Error<JourneysGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/journeys", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = origin_gid {
        local_var_req_builder = local_var_req_builder.query(&[("originGid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = origin_name {
        local_var_req_builder = local_var_req_builder.query(&[("originName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = origin_latitude {
        local_var_req_builder = local_var_req_builder.query(&[("originLatitude", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = origin_longitude {
        local_var_req_builder = local_var_req_builder.query(&[("originLongitude", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = destination_gid {
        local_var_req_builder = local_var_req_builder.query(&[("destinationGid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = destination_name {
        local_var_req_builder = local_var_req_builder.query(&[("destinationName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = destination_latitude {
        local_var_req_builder = local_var_req_builder.query(&[("destinationLatitude", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = destination_longitude {
        local_var_req_builder = local_var_req_builder.query(&[("destinationLongitude", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date_time {
        local_var_req_builder = local_var_req_builder.query(&[("dateTime", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date_time_relates_to {
        local_var_req_builder = local_var_req_builder.query(&[("dateTimeRelatesTo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pagination_reference {
        local_var_req_builder = local_var_req_builder.query(&[("paginationReference", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transport_modes {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("transportModes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("transportModes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = transport_sub_modes {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("transportSubModes".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("transportSubModes", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = only_direct_connections {
        local_var_req_builder = local_var_req_builder.query(&[("onlyDirectConnections", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_nearby_stop_areas {
        local_var_req_builder = local_var_req_builder.query(&[("includeNearbyStopAreas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = via_gid {
        local_var_req_builder = local_var_req_builder.query(&[("viaGid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = origin_walk {
        local_var_req_builder = local_var_req_builder.query(&[("originWalk", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = dest_walk {
        local_var_req_builder = local_var_req_builder.query(&[("destWalk", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = origin_bike {
        local_var_req_builder = local_var_req_builder.query(&[("originBike", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = dest_bike {
        local_var_req_builder = local_var_req_builder.query(&[("destBike", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = total_bike {
        local_var_req_builder = local_var_req_builder.query(&[("totalBike", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = origin_car {
        local_var_req_builder = local_var_req_builder.query(&[("originCar", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = dest_car {
        local_var_req_builder = local_var_req_builder.query(&[("destCar", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = origin_park {
        local_var_req_builder = local_var_req_builder.query(&[("originPark", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = dest_park {
        local_var_req_builder = local_var_req_builder.query(&[("destPark", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interchange_duration_in_minutes {
        local_var_req_builder = local_var_req_builder.query(&[("interchangeDurationInMinutes", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_occupancy {
        local_var_req_builder = local_var_req_builder.query(&[("includeOccupancy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<JourneysGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sample request:        GET /journeys/reconstruct?ref=¶HKI¶T$A=1@O=Brunnsparken, Göteborg@L=1760003@a=128@$A=1@O=Korsvägen, Göteborg@L=3980004@a=128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
pub async fn journeys_reconstruct_get(configuration: &configuration::Configuration, r#ref: &str, include_occupancy: Option<bool>) -> Result<crate::models::JourneysPeriodJourneyApiModel, Error<JourneysReconstructGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/journeys/reconstruct", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("ref", &r#ref.to_string())]);
    if let Some(ref local_var_str) = include_occupancy {
        local_var_req_builder = local_var_req_builder.query(&[("includeOccupancy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<JourneysReconstructGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn journeys_valid_time_interval_get(configuration: &configuration::Configuration, ) -> Result<crate::models::ValidTimeIntervalApiModel, Error<JourneysValidTimeIntervalGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/journeys/valid-time-interval", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<JourneysValidTimeIntervalGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

