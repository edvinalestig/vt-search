/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DeparturesAndArrivalsPeriodDepartureApiModel {
    /// A reference that should be used when getting detailed information about the journey.
    #[serde(rename = "detailsReference", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub details_reference: Option<Option<String>>,
    #[serde(rename = "serviceJourney", skip_serializing_if = "Option::is_none")]
    pub service_journey: Option<Box<crate::models::DeparturesAndArrivalsPeriodServiceJourneyApiModel>>,
    #[serde(rename = "stopPoint")]
    pub stop_point: Box<crate::models::DeparturesAndArrivalsPeriodStopPointApiModel>,
    /// The planned time of the call in RFC 3339 format.
    #[serde(rename = "plannedTime")]
    pub planned_time: String,
    /// The estimated time of the call in RFC 3339 format.
    #[serde(rename = "estimatedTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub estimated_time: Option<Option<String>>,
    /// The best known time of the call in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.
    #[serde(rename = "estimatedOtherwisePlannedTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub estimated_otherwise_planned_time: Option<Option<String>>,
    /// Flag indicating if the departure or arrival is cancelled.
    #[serde(rename = "isCancelled", skip_serializing_if = "Option::is_none")]
    pub is_cancelled: Option<bool>,
    /// Flag indicating if the departure or arrival is partially cancelled.
    #[serde(rename = "isPartCancelled", skip_serializing_if = "Option::is_none")]
    pub is_part_cancelled: Option<bool>,
    #[serde(rename = "occupancy", skip_serializing_if = "Option::is_none")]
    pub occupancy: Option<Box<crate::models::OccupancyInformationApiModel>>,
}

impl DeparturesAndArrivalsPeriodDepartureApiModel {
    pub fn new(stop_point: crate::models::DeparturesAndArrivalsPeriodStopPointApiModel, planned_time: String) -> DeparturesAndArrivalsPeriodDepartureApiModel {
        DeparturesAndArrivalsPeriodDepartureApiModel {
            details_reference: None,
            service_journey: None,
            stop_point: Box::new(stop_point),
            planned_time,
            estimated_time: None,
            estimated_otherwise_planned_time: None,
            is_cancelled: None,
            is_part_cancelled: None,
            occupancy: None,
        }
    }
}


