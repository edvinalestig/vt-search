/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// JourneysPeriodJourneyApiModel : Information about a journey.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JourneysPeriodJourneyApiModel {
    /// A reference that can be used to reconstruct this journey at a later time.
    #[serde(rename = "reconstructionReference", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reconstruction_reference: Option<Option<String>>,
    /// A reference that should be used when getting detailed information about the journey.
    #[serde(rename = "detailsReference", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub details_reference: Option<Option<String>>,
    #[serde(rename = "departureAccessLink", skip_serializing_if = "Option::is_none")]
    pub departure_access_link: Option<Box<crate::models::JourneysPeriodDepartureAccessLinkApiModel>>,
    /// A list of trip legs on a journey, when applicable. A journey has either one or more trip legs or one  destination link.
    #[serde(rename = "tripLegs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub trip_legs: Option<Option<Vec<crate::models::JourneysPeriodTripLegApiModel>>>,
    /// A list of ConnectionLinks between TripLegs, when applicable. The internal order of TripLegs and ConnectionLinks is defined by Index-property on the objects.
    #[serde(rename = "connectionLinks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connection_links: Option<Option<Vec<crate::models::JourneysPeriodConnectionLinkApiModel>>>,
    #[serde(rename = "arrivalAccessLink", skip_serializing_if = "Option::is_none")]
    pub arrival_access_link: Option<Box<crate::models::JourneysPeriodArrivalAccessLinkApiModel>>,
    #[serde(rename = "destinationLink", skip_serializing_if = "Option::is_none")]
    pub destination_link: Option<Box<crate::models::JourneysPeriodDestinationLinkApiModel>>,
    /// Flag indicating if the first trip leg of the journey is departed.
    #[serde(rename = "isDeparted", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_departed: Option<Option<bool>>,
    #[serde(rename = "occupancy", skip_serializing_if = "Option::is_none")]
    pub occupancy: Option<Box<crate::models::OccupancyInformationApiModel>>,
}

impl JourneysPeriodJourneyApiModel {
    /// Information about a journey.
    pub fn new() -> JourneysPeriodJourneyApiModel {
        JourneysPeriodJourneyApiModel {
            reconstruction_reference: None,
            details_reference: None,
            departure_access_link: None,
            trip_legs: None,
            connection_links: None,
            arrival_access_link: None,
            destination_link: None,
            is_departed: None,
            occupancy: None,
        }
    }
}


