/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PositionsPeriodJourneyPositionApiModel {
    /// Journey reference
    #[serde(rename = "detailsReference", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub details_reference: Option<Option<String>>,
    #[serde(rename = "line", skip_serializing_if = "Option::is_none")]
    pub line: Option<Box<crate::models::PositionsPeriodLineDetailsApiModel>>,
    /// Journey notes
    #[serde(rename = "notes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub notes: Option<Option<Vec<crate::models::Note>>>,
    /// Journey name
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Journey direction
    #[serde(rename = "direction", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Option<String>>,
    /// Current latitude of journey
    #[serde(rename = "latitude", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub latitude: Option<Option<f64>>,
    /// Current longitude of journey
    #[serde(rename = "longitude", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub longitude: Option<Option<f64>>,
}

impl PositionsPeriodJourneyPositionApiModel {
    pub fn new() -> PositionsPeriodJourneyPositionApiModel {
        PositionsPeriodJourneyPositionApiModel {
            details_reference: None,
            line: None,
            notes: None,
            name: None,
            direction: None,
            latitude: None,
            longitude: None,
        }
    }
}


