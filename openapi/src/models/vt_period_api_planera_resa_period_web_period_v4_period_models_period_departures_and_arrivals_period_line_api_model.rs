/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// DeparturesAndArrivalsPeriodLineApiModel : Information about a line of a departure or arrival service journey.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DeparturesAndArrivalsPeriodLineApiModel {
    /// 16-digit Västtrafik line gid.
    #[serde(rename = "gid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gid: Option<Option<String>>,
    /// The line name.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// The short name of the line, usually 5 characters or less.
    #[serde(rename = "shortName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub short_name: Option<Option<String>>,
    /// The designation of the line.
    #[serde(rename = "designation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub designation: Option<Option<String>>,
    /// The background color of the line symbol.
    #[serde(rename = "backgroundColor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub background_color: Option<Option<String>>,
    /// The foreground color of the line symbol.
    #[serde(rename = "foregroundColor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub foreground_color: Option<Option<String>>,
    /// The border color of the line symbol.
    #[serde(rename = "borderColor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub border_color: Option<Option<String>>,
    #[serde(rename = "transportMode", skip_serializing_if = "Option::is_none")]
    pub transport_mode: Option<crate::models::TransportMode>,
    #[serde(rename = "transportSubMode", skip_serializing_if = "Option::is_none")]
    pub transport_sub_mode: Option<crate::models::TransportSubMode>,
    /// Flag indicating if the line is wheelchair accessible.
    #[serde(rename = "isWheelchairAccessible", skip_serializing_if = "Option::is_none")]
    pub is_wheelchair_accessible: Option<bool>,
}

impl DeparturesAndArrivalsPeriodLineApiModel {
    /// Information about a line of a departure or arrival service journey.
    pub fn new() -> DeparturesAndArrivalsPeriodLineApiModel {
        DeparturesAndArrivalsPeriodLineApiModel {
            gid: None,
            name: None,
            short_name: None,
            designation: None,
            background_color: None,
            foreground_color: None,
            border_color: None,
            transport_mode: None,
            transport_sub_mode: None,
            is_wheelchair_accessible: None,
        }
    }
}


