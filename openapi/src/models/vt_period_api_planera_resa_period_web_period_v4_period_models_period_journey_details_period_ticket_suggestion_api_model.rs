/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// JourneyDetailsPeriodTicketSuggestionApiModel : Information about a ticket suggestion.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JourneyDetailsPeriodTicketSuggestionApiModel {
    /// The product id.
    #[serde(rename = "productId", skip_serializing_if = "Option::is_none")]
    pub product_id: Option<i32>,
    /// The product name.
    #[serde(rename = "productName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub product_name: Option<Option<String>>,
    /// The product type.
    #[serde(rename = "productType", skip_serializing_if = "Option::is_none")]
    pub product_type: Option<i32>,
    #[serde(rename = "travellerCategory", skip_serializing_if = "Option::is_none")]
    pub traveller_category: Option<crate::models::TravellerCategory>,
    /// The product price in SEK.
    #[serde(rename = "priceInSek", skip_serializing_if = "Option::is_none")]
    pub price_in_sek: Option<f64>,
    #[serde(rename = "timeValidity", skip_serializing_if = "Option::is_none")]
    pub time_validity: Option<Box<crate::models::JourneyDetailsPeriodTimeValidityApiModel>>,
    #[serde(rename = "timeLimitation", skip_serializing_if = "Option::is_none")]
    pub time_limitation: Option<crate::models::TimeLimitation>,
    /// A list of the channels that sell the product.
    #[serde(rename = "saleChannels", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sale_channels: Option<Option<Vec<crate::models::JourneyDetailsPeriodChannelApiModel>>>,
    /// A list of the valid zones for the ticket.
    #[serde(rename = "validZones", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub valid_zones: Option<Option<Vec<crate::models::JourneyDetailsPeriodZoneApiModel>>>,
    #[serde(rename = "productInstanceType", skip_serializing_if = "Option::is_none")]
    pub product_instance_type: Option<crate::models::ProductInstanceTypeApiModel>,
    #[serde(rename = "punchConfiguration", skip_serializing_if = "Option::is_none")]
    pub punch_configuration: Option<Box<crate::models::JourneyDetailsPeriodPunchConfigurationApiModel>>,
    /// Used to get ticket offer.
    #[serde(rename = "offerSpecification", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub offer_specification: Option<Option<String>>,
}

impl JourneyDetailsPeriodTicketSuggestionApiModel {
    /// Information about a ticket suggestion.
    pub fn new() -> JourneyDetailsPeriodTicketSuggestionApiModel {
        JourneyDetailsPeriodTicketSuggestionApiModel {
            product_id: None,
            product_name: None,
            product_type: None,
            traveller_category: None,
            price_in_sek: None,
            time_validity: None,
            time_limitation: None,
            sale_channels: None,
            valid_zones: None,
            product_instance_type: None,
            punch_configuration: None,
            offer_specification: None,
        }
    }
}


