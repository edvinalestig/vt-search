/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// JourneysPeriodTripLegApiModel : Information about a journey trip leg.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JourneysPeriodTripLegApiModel {
    #[serde(rename = "origin")]
    pub origin: Box<crate::models::JourneysPeriodCallApiModel>,
    #[serde(rename = "destination")]
    pub destination: Box<crate::models::JourneysPeriodCallApiModel>,
    /// Flag indicating if the trip leg is cancelled.
    #[serde(rename = "isCancelled")]
    pub is_cancelled: bool,
    /// Flag indicating if the trip leg is partially cancelled.
    #[serde(rename = "isPartCancelled", skip_serializing_if = "Option::is_none")]
    pub is_part_cancelled: Option<bool>,
    #[serde(rename = "serviceJourney", skip_serializing_if = "Option::is_none")]
    pub service_journey: Option<Box<crate::models::JourneysPeriodServiceJourneyApiModel>>,
    /// An ordered list (most important first) of notes related to the trip leg.
    #[serde(rename = "notes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub notes: Option<Option<Vec<crate::models::Note>>>,
    /// Estimated distance in meters. Only for transport mode Walk.
    #[serde(rename = "estimatedDistanceInMeters", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub estimated_distance_in_meters: Option<Option<i32>>,
    /// The planned (according to timetable) connecting time in minutes relative to  the previous public transport trip leg (if any).
    #[serde(rename = "plannedConnectingTimeInMinutes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub planned_connecting_time_in_minutes: Option<Option<i32>>,
    /// The estimated (according to real-time data) connecting time in minutes relative to  the previous public transport trip leg (if any).
    #[serde(rename = "estimatedConnectingTimeInMinutes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub estimated_connecting_time_in_minutes: Option<Option<i32>>,
    /// Flag indicating that there is less than 5 minutes margin between arriving at the  origin stop point and the departure from that stop point.
    #[serde(rename = "isRiskOfMissingConnection", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_risk_of_missing_connection: Option<Option<bool>>,
    /// The planned departure time in RFC 3339 format.
    #[serde(rename = "plannedDepartureTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub planned_departure_time: Option<Option<String>>,
    /// The planned arrival time in RFC 3339 format.
    #[serde(rename = "plannedArrivalTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub planned_arrival_time: Option<Option<String>>,
    /// The planned duration in minutes.
    #[serde(rename = "plannedDurationInMinutes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub planned_duration_in_minutes: Option<Option<i32>>,
    /// The estimated departure time in RFC 3339 format, if available.
    #[serde(rename = "estimatedDepartureTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub estimated_departure_time: Option<Option<String>>,
    /// The estimated arrival time in RFC 3339 format, if available.
    #[serde(rename = "estimatedArrivalTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub estimated_arrival_time: Option<Option<String>>,
    /// The estimated duration in minutes, if available.
    #[serde(rename = "estimatedDurationInMinutes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub estimated_duration_in_minutes: Option<Option<i32>>,
    /// The best known time of the arrival in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.
    #[serde(rename = "estimatedOtherwisePlannedArrivalTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub estimated_otherwise_planned_arrival_time: Option<Option<String>>,
    /// The best known time of the departure in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.
    #[serde(rename = "estimatedOtherwisePlannedDepartureTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub estimated_otherwise_planned_departure_time: Option<Option<String>>,
    #[serde(rename = "occupancy", skip_serializing_if = "Option::is_none")]
    pub occupancy: Option<Box<crate::models::OccupancyInformationApiModel>>,
    /// Index of Leg in Journey
    #[serde(rename = "journeyLegIndex", skip_serializing_if = "Option::is_none")]
    pub journey_leg_index: Option<i32>,
}

impl JourneysPeriodTripLegApiModel {
    /// Information about a journey trip leg.
    pub fn new(origin: crate::models::JourneysPeriodCallApiModel, destination: crate::models::JourneysPeriodCallApiModel, is_cancelled: bool) -> JourneysPeriodTripLegApiModel {
        JourneysPeriodTripLegApiModel {
            origin: Box::new(origin),
            destination: Box::new(destination),
            is_cancelled,
            is_part_cancelled: None,
            service_journey: None,
            notes: None,
            estimated_distance_in_meters: None,
            planned_connecting_time_in_minutes: None,
            estimated_connecting_time_in_minutes: None,
            is_risk_of_missing_connection: None,
            planned_departure_time: None,
            planned_arrival_time: None,
            planned_duration_in_minutes: None,
            estimated_departure_time: None,
            estimated_arrival_time: None,
            estimated_duration_in_minutes: None,
            estimated_otherwise_planned_arrival_time: None,
            estimated_otherwise_planned_departure_time: None,
            occupancy: None,
            journey_leg_index: None,
        }
    }
}


